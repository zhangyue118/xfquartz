<?xml version="1.0" encoding="UTF-8" ?>   
    <!DOCTYPE mapper   
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 不使用namespace的话sql搜索定位会比较方便-->
<mapper namespace="com.netintech.xfquartz.dao.xf.WorkconfirmDao">

     <!-- 实体类与数据库映射字段部分  start -->
	<resultMap id="ResultMapWorkconfirm" type="com.netintech.xfquartz.bean.Workconfirm">
        <result property="id" column="id"  jdbcType="INTEGER"/>
        <result property="xfMattersId" column="xf_matters_id"  jdbcType="INTEGER"/>
        <result property="communicationResult" column="communication_result"  jdbcType="VARCHAR"/>
        <result property="result" column="result"  jdbcType="VARCHAR"/>
        <result property="validity" column="validity"  jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time"  jdbcType="DATE"/>
        <result property="creater" column="creater"  jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time"  jdbcType="DATE"/>
        <result property="updater" column="updater"  jdbcType="INTEGER"/>
	</resultMap>
	 <!-- 实体类与数据库映射字段部分  end -->
	 
	 <!-- 声明数据库所有字段 -->
	<sql id="Workconfirm_field">
           id,
           xf_matters_id,
           communication_result,
           result,
           validity,
           create_time,
           creater,
           update_time,
           updater
	</sql>
	
	 <!-- 声明数据库字段除id -->
	<sql id="Workconfirm_insertField">
           xf_matters_id,
           communication_result,
           result,
           validity,
           create_time,
           creater,
           update_time,
           updater
	</sql>
	
	<!-- 实体类属性  -->
	<sql id="Workconfirm_insert">
        	#{xfMattersId} ,
        	#{communicationResult} ,
        	#{result} ,
        	#{validity} ,
        	#{createTime} ,
        	#{creater} ,
        	#{updateTime} ,
        	#{updater} 
	</sql>
	
	<!-- 执行修改时 数据库字段和表字段比较 -->
	<sql id="Workconfirm_update">
		    <if test="xfMattersId != null" >
	            xf_matters_id = #{xfMattersId} ,
	        </if>
		    <if test="communicationResult != null" >
	            communication_result = #{communicationResult} ,
	        </if>
		    <if test="result != null" >
	            result = #{result} ,
	        </if>
		    <if test="validity != null" >
	            validity = #{validity} ,
	        </if>
		    <if test="createTime != null" >
	            create_time = #{createTime} ,
	        </if>
		    <if test="creater != null" >
	            creater = #{creater} ,
	        </if>
		    <if test="updateTime != null" >
	            update_time = #{updateTime} ,
	        </if>
		    <if test="updater != null" >
	            updater = #{updater} 
	        </if>
	</sql>
	
	<!-- 查询时条件 -->
	<sql id="Workconfirm_where">
	        <if test="id != null " >
	            and id =#{id}
	        </if>
	        <if test="xfMattersId != null " >
	            and xf_matters_id =#{xfMattersId}
	        </if>
	        <if test="communicationResult != null " >
	            and communication_result =#{communicationResult}
	        </if>
	        <if test="result != null " >
	            and result =#{result}
	        </if>
	        <if test="validity != null " >
	            and validity =#{validity}
	        </if>
	        <if test="createTime != null " >
	            and create_time =#{createTime}
	        </if>
	        <if test="creater != null " >
	            and creater =#{creater}
	        </if>
	        <if test="updateTime != null " >
	            and update_time =#{updateTime}
	        </if>
	        <if test="updater != null " >
	            and updater =#{updater}
	        </if>
	</sql>
	
   <!-- **************************************分割线************************************************************ -->	
	
	<!-- 以下是sql执行语句 
	     注意：1)需要传参数的请注意你使用的方法是 xxByMap还是ByEntuty 存放的参数类型不一致。
	      2)非自定义的方法已经是basedao注明的。方法名一定要和id相同
	      3)自定义类的方法注意是否和共有方法重名id
	      4)执行sql出现顺序和baseDao方法一致，便于查询请勿随意添加，自定义的sql一律放在自定义sql区域
	 -->
	
	
   <!-- ========================================新增==================================================================== -->
	<!-- 
	 【注意添加序列】
	 1.方法描述：新增数据
	 2.参数：实体类
	 3.返回：主键
	-->
	<insert id="insert" parameterType="com.netintech.xfquartz.bean.Workconfirm" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO workconfirm (
        <include refid="Workconfirm_insertField" />
        ) VALUES (
        <include refid="Workconfirm_insert" />       
        )
	</insert>
	
	
	 <!-- ========================================删除==================================================================== -->
	<!-- 
	 1.方法描述：根据主键id删除
	 2.参数：主键id
	-->
	<delete id="deleteById" parameterType="java.lang.Integer">
	 delete from workconfirm where id=#{id}
	</delete>
	
	
	<!-- 
	 1.方法描述：根据实体类删除
	 2.参数：主键id
	-->
	<delete id="deleteByEntity" parameterType="com.netintech.xfquartz.bean.Workconfirm">
	 delete from workconfirm
	  WHERE 1=1
      <include refid="Workconfirm_where" />   
	</delete>
	
	
	<!-- 
	 1.方法描述：根据map删除
	 2.参数：主键id
	-->
	<delete id="deleteByMap" parameterType="java.util.HashMap">
	 delete from workconfirm
	  WHERE 1=1
      <include refid="Workconfirm_where" />   
	</delete>
	
	
	 <!-- ========================================修改==================================================================== -->
	<!-- 
	 1.方法描述：修改数据通过id
	 2.参数：实体类
	 -->
	<update id="updateById" parameterType="com.netintech.xfquartz.bean.Workconfirm">
        UPDATE workconfirm
        <set>
	        <include refid="Workconfirm_update" />
	    </set>
        WHERE 1=1
        	and id=#{id}      
	</update>
	
	
	 <!-- ========================================查询列表【不分页】==================================================================== -->
	
	<!-- 
	 1.方法描述：用于listByMap根据map查询
	 2.参数：map
	-->
	<select id="listByMap" resultMap="ResultMapWorkconfirm" parameterType="map">
		select <include refid="Workconfirm_field" />
 		from workconfirm where 1=1
 		<include refid="Workconfirm_where" /> 
	</select>
	
	
	<!-- 
	 1.方法描述：查询所有实体,根据实体属性值为判断条件查询所有实体，
	 2.参数：Entity
	-->
	<select id="listByEntity" resultMap="ResultMapWorkconfirm" parameterType="com.netintech.xfquartz.bean.Workconfirm">
		select <include refid="Workconfirm_field" />
 		from workconfirm where 1=1
 		<include refid="Workconfirm_where" /> 
	</select>
	
	
	
	 <!-- ========================================查询单个对象==================================================================== -->
	<!-- 
	 1.方法描述：select查询单个
	 2.参数：id
	-->
	<select id="getById" resultMap="ResultMapWorkconfirm" parameterType="java.lang.Integer">
		select 	<include refid="Workconfirm_field" />
 		from workconfirm 
 		where id=#{id}
	</select>
	
	<!-- 
	 1.方法描述：用于getByMap根据map查询
	 2.参数：map
	-->
	<select id="getByMap" resultMap="ResultMapWorkconfirm" parameterType="map">
		select <include refid="Workconfirm_field" />
 		from workconfirm where 1=1
 		<include refid="Workconfirm_where" /> 
	</select>
	
	<!-- 
	 1.方法描述：用于Entity根据Entity查询
	 2.参数：Entity
	 -->
	<select id="getByEntity" resultMap="ResultMapWorkconfirm" parameterType="com.netintech.xfquartz.bean.Workconfirm">
		select <include refid="Workconfirm_field" />
 		from workconfirm where 1=1
 		<include refid="Workconfirm_where" /> 
	</select>
	
	
	 <!-- ========================================批量新增修改==================================================================== -->
	<!-- 
	 1.方法描述：批量插入
	 2.参数：集合/数组
	-->
	<insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO workconfirm (
        <include refid="Workconfirm_insertField" />
        ) VALUES 
        <foreach collection="list" item="item" index="index"
			separator=",">
			(
			
	            #{item.xfMattersId} ,
	            #{item.communicationResult} ,
	            #{item.result} ,
	            #{item.validity} ,
	            #{item.createTime} ,
	            #{item.creater} ,
	            #{item.updateTime} ,
	            #{item.updater} 
			
			)
		</foreach>       
        
	</insert>
    
    <!-- 
	 1.方法描述：批量修改
	 2.参数：集合/数组
	-->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index"
			separator=";">
        UPDATE 
        workconfirm 
        <set>
		    <if test="item.xfMattersId != null" >
	        xf_matters_id = #{item.xfMattersId},
	        </if>
		    <if test="item.communicationResult != null" >
	        communication_result = #{item.communicationResult},
	        </if>
		    <if test="item.result != null" >
	        result = #{item.result},
	        </if>
		    <if test="item.validity != null" >
	        validity = #{item.validity},
	        </if>
		    <if test="item.createTime != null" >
	        create_time = #{item.createTime},
	        </if>
		    <if test="item.creater != null" >
	        creater = #{item.creater},
	        </if>
		    <if test="item.updateTime != null" >
	        update_time = #{item.updateTime},
	        </if>
		    <if test="item.updater != null" >
	        updater = #{item.updater}
	        </if>
	    </set>
        WHERE  
        	 id=#{id}
        </foreach>    
	</update>
	
	
	 <!--查询总数  -->
	<select id="getWorkconfirmCount"  parameterType="map" resultType="int">
	     SELECT count(1) FROM workconfirm 
	     where 1=1 
          <if test="keyword!=null and keyword!=''">
	      </if>
	</select>
	
	 <!--查询列表  -->
	<select id="getWorkconfirmList"  parameterType="map"  resultType="com.netintech.xfquartz.bean.Workconfirm">
	   SELECT * FROM workconfirm
       where 1=1 
	    <if test="keyword!=null and keyword!=''">
	    </if>
         LIMIT 0,1000
	</select>   
	
	<!-- 批量删除 -->
	<delete id="exDelete" parameterType="String">
	  delete from workconfirm
	   where id in (1)
	</delete>
	

</mapper>

